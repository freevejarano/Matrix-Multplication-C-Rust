use std::time::{Duration, Instant};

struct Matrix {
    dat: [[f32; 10]; 10]
}
 
impl Matrix {
    pub fn mult_m(a: Matrix, b: Matrix) -> Matrix
    {
        let mut out = Matrix {
            dat: [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]
        };
 
        for i in 0..10{
            for j in 0..10 {
                for k in 0..10 {
                    out.dat[i][j] += a.dat[i][k] * b.dat[k][j];
                }
            }
        }
 
        out
    }
 
    pub fn print(self)
    {
        for i in 0..10 {
            for j in 0..10 {
                print!("{} ", self.dat[i][j]);
            }
            print!("\n");
        }
    }
}
 
fn main()
{
    let  a = Matrix {
        dat: [[1., 2., 3., 4., 5., 6., 7., 8., 9., 10.],
        [11., 12., 13., 14., 15., 16., 17., 18., 19., 20.],
        [21., 22., 23., 24., 25., 26., 27., 28., 29., 30.],
        [31., 32., 33., 34., 35., 36., 37., 38., 39., 40.],
        [41., 42., 43., 44., 45., 46., 47., 48., 49., 50.],
        [51., 52., 53., 54., 55., 56., 57., 58., 59., 60.],
        [61., 62., 63., 64., 65., 66., 67., 68., 69., 70.],
        [71., 72., 73., 74., 75., 76., 77., 78., 79., 80.],
        [81., 82., 83., 84., 85., 86., 87., 88., 89., 90.],
        [91., 92., 93., 94., 95., 96., 97., 98., 99., 100.]]
    };
 
    let  b = Matrix {
        dat: [[100., 99., 98., 97., 96., 95., 94., 93., 92., 91.],
        [110., 109., 108., 107., 106., 105., 104., 103., 102., 101.],
        [120., 119., 118., 117., 116., 115., 114., 113., 112., 111.],
        [130., 129., 128., 127., 126., 125., 124., 123., 122., 121.],
        [140., 139., 138., 137., 136., 135., 134., 133., 132., 131.],
        [150., 149., 148., 147., 146., 145., 144., 143., 142., 141.],
        [160., 159., 158., 157., 156., 155., 154., 153., 152., 151.],
        [170., 169., 168., 167., 166., 165., 164., 163., 162., 161.],
        [180., 179., 178., 177., 176., 175., 174., 173., 172., 171.],
        [190., 189., 188., 187., 186., 185., 184., 183., 182., 181.]]
    };
 
 
    let start = Instant::now();
    let c = Matrix::mult_m(a, b);
    let duration = start.elapsed();
    println!("AxB");
    c.print();

    println!("Time: {:?}", duration);
}